<?phpApp::uses('AppController', 'Controller');/** *  * @property Hand $Hand *  * @author RoMa * */class SkillsController extends AppController {		public $uses = array('Hand','Street','Action');	/** * @todo Dummy data */		public function report() {					$this->Action->virtualFields = array(			'score' => 'FLOOR(SUM(Action.skill_score))',			'profit' => 'FLOOR(SUM(Hand.profit))',//			'luck' => 'FLOOR(SUM(Street.direct_luck_score) + SUM(Street.indirect_luck_score))'			'luck' => 'SUM(Street.direct_luck_score))'		);				$joins = array(			array(				'table' => 'streets',				'alias' => 'Street',				'type' => 'LEFT',				'conditions' => array('Street.id = Action.street_id')			),			array(				'table' => 'hands',				'alias' => 'Hand',				'type' => 'LEFT',				'conditions' => array('Hand.id = Street.hand_id')			)						);		$streets = Set::extract('{n}.Action.score',$this->Action->find('all', array(			'fields' => array($this->Action->virtualFields['score'].' as Action__score'),			'conditions' => array('Hand.user_id' => $this->Auth->user('id')),			'joins' => $joins,			'group' => 'Street.street',			'order' => array('Street.street' => 'ASC')			)));				$score = $this->Action->find('first', array(			'fields' => array($this->Action->virtualFields['score'].' as Action__score',$this->Action->virtualFields['luck'].' as Action__luck'),			'conditions' => array('Hand.user_id' => $this->Auth->user('id')),			'joins' => $joins		));		$lastScore = $this->Action->find('first', array(			'fields' => array(				'Hand.id',				'Hand.session',				'Hand.hand_number',							$this->Action->virtualFields['score'].' as Action__score',				$this->Action->virtualFields['luck'].' as Action__luck'			),			'conditions' => array(				'Hand.user_id' => $this->Auth->user('id'),				'Hand.id = (select max(hands.id) from hands)'								),			'joins' => $joins		));						$categories = array();		$category = $this->Action->find('first', array(			'fields' => array($this->Action->virtualFields['score'].' as Action__score'),			'conditions' => array(				'Hand.user_id' => $this->Auth->user('id'),				'Action.max_equity' => 0,				'Action.action' => array(16,64)					),			'joins' => $joins		));		$categories[] = array('name' => 'Bluffing','score' => $category['Action']['score']);		$category = $this->Action->find('first', array(			'fields' => array($this->Action->virtualFields['score'].' as Action__score'),			'conditions' => array(				'Hand.user_id' => $this->Auth->user('id'),				'Action.max_equity' => 1,				'Action.action' => array(16,64)			),			'joins' => $joins		));		$categories[] = array('name' => 'Vb','score' => $category['Action']['score']);		$category = $this->Action->find('first', array(			'fields' => array($this->Action->virtualFields['score'].' as Action__score'),			'conditions' => array(				'Hand.user_id' => $this->Auth->user('id'),				'Action.max_equity' => 0,				'Action.action' => 0			),			'joins' => $joins		));		$categories[] = array('name' => 'Smart Fold','score' => $category['Action']['score']);				$category = $this->Action->find('first', array(			'fields' => array($this->Action->virtualFields['score'].' as Action__score'),			'conditions' => array(				'Hand.user_id' => $this->Auth->user('id'),				'Action.max_equity' => 1,				'Action.action' => array(1,4),				'Action.most_aggressive_opponent_reaction <>' => -1				),			'joins' => $joins		));		$categories[] = array('name' => 'Slow Play','score' => $category['Action']['score']);				$report = array(			'hand_id' => $lastScore['Hand']['id'],				'hand_session' => $lastScore['Hand']['session'],			'hand_number' => $lastScore['Hand']['hand_number'],							'hand_score' => $lastScore['Action']['score'],			'hand_luck' => $lastScore['Action']['luck'],											'hand_played' => $this->Hand->find('count', array('conditions' => array('Hand.user_id' => $this->Auth->user('id')))),			'total_skills_score' => $score['Action']['score'],			'total_luck_score' => $score['Action']['luck'],			'total_profit' => $score['Hand']['profit'],			'total_decision_score' => $score['Hand']['profit'] - $score['Action']['luck'],			'preflop' => $streets[0],			'flop' => $streets[1],			'turn' => $streets[2],			'river' => $streets[3],			'categories' => $categories								);				$this->set(array('report' => $report,'_serialize' => array('report')));	}}